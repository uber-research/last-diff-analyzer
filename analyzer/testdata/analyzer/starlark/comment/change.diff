*** THIS DIFF EXISTS FOR INFORMATIONAL PURPOSES ONLY TO DESCRIBE CHANGES BETWEEN base.diff AND last.diff ***
***   CAVEAT: THIS DIFF IS GENERATED BY interdiff WHICH IS KNOWN TO BE OCCASIONALLY NOT FULLY ACCURATE   ***
diff -u another.star another.star
--- another.star
+++ another.star
@@ -14,7 +14,6 @@
 # limitations under the License.
 number = 18
 
-# Define a dictionary
 people = {
     "Alice": 22,
     "Bob": 40,
@@ -22,9 +21,8 @@
     "Dave": 14,
 }
 
-names = ", ".join(people.keys())  # Alice, Bob, Charlie, Dave
+names = ", ".join(people.keys())
 
-# Define a function
 def greet(name):
     """Return a greeting."""
     return "Hello {}!".format(name)
diff -u comment.star comment.star
--- comment.star
+++ comment.star
@@ -15,13 +15,23 @@
 
 # (From https://github.com/bazelbuild/rules_go/blob/master/go/def.bzl@a6f9d0c)
 
-# This is a comment for testing comment-removal changes.
-
 load("//go/private:repositories.bzl", "go_repositories")
 load("//go/private:go_repository.bzl", "go_repository", "new_go_repository")
 load("//go/private:go_prefix.bzl", "go_prefix")
 load("//go/private:json.bzl", "json_marshal")
 
+"""These are bare-bones Go rules.
+
+In order of priority:
+
+- BUILD file must be written by hand.
+
+- No support for SWIG
+
+- No test sharding or test XML.
+
+"""
+
 _DEFAULT_LIB = "go_default_library"
 
 _VENDOR_PREFIX = "/vendor/"
@@ -30,9 +40,10 @@
     ".go",
     ".s",
     ".S",
-    ".h",
+    ".h",  # may be included by .s
 ])
 
+# be consistent to cc_library.
 hdr_exts = [
     ".h",
     ".hh",
@@ -43,6 +54,8 @@
 
 cc_hdr_filetype = FileType(hdr_exts)
 
+# Extensions of files we can build with the Go compiler or with cc_library.
+# This is a subset of the extensions recognized by go/build.
 cgo_filetype = FileType([
     ".go",
     ".c",
@@ -57,6 +70,8 @@
     ".hxx",
 ])
 
+################
+
 def go_environment_vars(ctx):
     """Return a map of environment variables for use with actions, based on
     the arguments. Uses the ctx.fragments.cpp.cpu attribute, if present,
@@ -92,6 +107,8 @@
 
 def _emit_generate_params_action(cmds, ctx, fn):
     cmds_all = [
+        # Use bash explicitly. /bin/sh is default, and it may be linked to a
+        # different shell, e.g., /bin/dash on Ubuntu.
         "#!/bin/bash",
         "set -e",
     ]
@@ -106,6 +123,14 @@
     return f
 
 def _emit_go_asm_action(ctx, source, hdrs, out_obj):
+    """Construct the command line for compiling Go Assembly code.
+    Constructs a symlink tree to accommodate for workspace name.
+    Args:
+      ctx: The starlark Context.
+      source: a source code artifact
+      hdrs: list of .h files that may be included
+      out_obj: the artifact (configured target?) that should be produced
+    """
     params = {
         "go_tool": ctx.file.go_tool.path,
         "includes": [f.dirname for f in hdrs] + [ctx.file.go_include.path],
@@ -123,6 +148,14 @@
     )
 
 def _go_importpath(ctx):
+    """Returns the expected importpath of the go_library being built.
+
+    Args:
+      ctx: The starlark Context
+
+    Returns:
+      Go importpath of the library
+    """
     path = ctx.attr.importpath
     if path != "":
         return path
@@ -140,6 +173,17 @@
     return path
 
 def _emit_go_compile_action(ctx, sources, deps, libpaths, out_object, gc_goopts):
+    """Construct the command line for compiling Go code.
+
+    Args:
+      ctx: The starlark Context.
+      sources: an iterable of source code artifacts (or CTs? or labels?)
+      deps: an iterable of dependencies. Each dependency d should have an
+        artifact in d.transitive_go_libraries representing all imported libraries.
+      libpaths: the set of paths to search for imported libraries.
+      out_object: the object file that should be produced
+      gc_goopts: additional flags to pass to the compiler.
+    """
     if ctx.coverage_instrumented():
         sources = _emit_go_cover_action(ctx, sources)
 
@@ -174,6 +218,13 @@
     return sources
 
 def _emit_go_pack_action(ctx, out_lib, objects):
+    """Construct the command line for packing objects together.
+
+    Args:
+      ctx: The starlark Context.
+      out_lib: the archive that should be produced
+      objects: an iterable of object files to be added to the output archive file.
+    """
     ctx.action(
         inputs = objects + ctx.files.toolchain,
         outputs = [out_lib],
@@ -184,8 +235,18 @@
     )
 
 def _emit_go_cover_action(ctx, sources):
+    """Construct the command line for test coverage instrument.
+
+    Args:
+      ctx: The starlark Context.
+      sources: an iterable of Go source files.
+
+    Returns:
+      A list of Go source code files which might be coverage instrumented.
+    """
     outputs = []
 
+    # TODO(linuxerwang): make the mode configurable.
     count = 0
 
     for src in sources:
@@ -209,6 +270,8 @@
     return outputs
 
 def go_library_impl(ctx):
+    """Implements the go_library() rule."""
+
     sources = depset(ctx.files.srcs)
     go_srcs = depset([s for s in sources if s.basename.endswith(".go")])
     asm_srcs = [s for s in sources if s.basename.endswith(".s") or s.basename.endswith(".S")]
@@ -294,6 +357,16 @@
     )
 
 def _c_linker_options(ctx, blocklist = []):
+    """Extracts flags to pass to $(CC) on link from the current context
+
+    Args:
+      ctx: the current context
+      blocklist: Any flags starts with any of these prefixes are filtered out from
+        the return value.
+
+    Returns:
+      A list of command line flags
+    """
     cpp = ctx.fragments.cpp
     features = ctx.features
     options = cpp.compiler_options(features)
@@ -326,6 +399,17 @@
     return gc_linkopts
 
 def _extract_extldflags(gc_linkopts, extldflags):
+    """Extracts -extldflags from gc_linkopts and combines them into a single list.
+
+    Args:
+      gc_linkopts: a list of flags passed in through the gc_linkopts attributes.
+        ctx.expand_make_variables should have already been applied.
+      extldflags: a list of flags to be passed to the external linker.
+
+    Return:
+      A tuple containing the filtered gc_linkopts with external flags removed,
+      and a combined list of external flags.
+    """
     filtered_gc_linkopts = []
     is_extldflags = False
     for opt in gc_linkopts:
@@ -346,6 +430,7 @@
         libs,
         executable,
         gc_linkopts):
+    """Sets up a symlink tree to libraries to link together."""
     config_strip = len(ctx.configuration.bin_dir.path) + 1
     pkg_depth = executable.dirname[config_strip:].count("/") + 1
 
@@ -373,6 +458,10 @@
         executable.path,
     ] + gc_linkopts + ['"${STAMP_XDEFS[@]}"']
 
+    # workaround for a bug in ld(1) on Mac OS X.
+    # http://lists.apple.com/archives/Darwin-dev/2006/Sep/msg00084.html
+    # TODO(yugui) Remove this workaround once rules_go stops supporting XCode 7.2
+    # or earlier.
     if not _is_darwin_cpu(ctx):
         link_cmd += ["-s"]
 
@@ -383,6 +472,9 @@
         "'%s'" % " ".join(extldflags),
     ] + [lib.path for lib in libs]
 
+    # Avoided -s on OSX but but it requires dsymutil to be on $PATH.
+    # TODO(yugui) Remove this workaround once rules_go stops supporting XCode 7.2
+    # or earlier.
     cmds = ["export PATH=$PATH:/usr/bin"]
 
     cmds += [
@@ -391,6 +483,8 @@
 
     stamp_inputs = []
     if ctx.attr.linkstamp:
+        # read workspace status files, converting "KEY value" lines
+        # to "-X $linkstamp.KEY=value" arguments to the go linker.
         stamp_inputs = [ctx.info_file, ctx.version_file]
         for f in stamp_inputs:
             cmds += [
@@ -413,6 +507,7 @@
     )
 
 def go_binary_impl(ctx):
+    """go_binary_impl emits actions for compiling and linking a go executable."""
     lib_result = go_library_impl(ctx)
     _emit_go_link_action(
         ctx,
@@ -431,6 +526,11 @@
     )
 
 def go_test_impl(ctx):
+    """go_test_impl implements go testing.
+
+    It emits an action to run the test generator, and then compiles the
+    test into a binary."""
+
     lib_result = go_library_impl(ctx)
     main_go = ctx.new_file(ctx.label.name + "_main_test.go")
     main_object = ctx.new_file(ctx.label.name + "_main_test.o")
@@ -490,6 +590,9 @@
         gc_linkopts = _gc_linkopts(ctx),
     )
 
+    # TODO(bazel-team): the Go tests should do a chdir to the directory
+    # holding the data files, so open-source go tests continue to work
+    # without code changes.
     runfiles = ctx.runfiles(files = [ctx.outputs.executable])
     runfiles = runfiles.merge(lib_result.runfiles)
     return struct(
@@ -721,11 +824,13 @@
 
     p = _pkg_dir(ctx.label.workspace_root, ctx.label.package) + "/"
     if p == "./":
-        p = ""
+        p = ""  # workaround when cgo_library in repository root
     out_dir = (ctx.configuration.genfiles_dir.path + "/" +
                p + ctx.attr.outdir)
     cc = ctx.fragments.cpp.compiler_executable
     cmds = [
+        # We cannot use env for CC because $(CC) on OSX is relative
+        # and '../' does not work fine due to symlinks.
         "export CC=$(cd $(dirname {cc}); pwd)/$(basename {cc})".format(cc = cc),
         "export CXX=$CC",
         'objdir="%s/gen"' % out_dir,
@@ -748,6 +853,8 @@
         "fi",
         '"$GOROOT/bin/go" tool cgo -objdir "$objdir" -- %s "${filtered_go_files[@]}"' %
         " ".join(['"%s"' % copt for copt in copts]),
+        # Rename the outputs using glob so we don't have to understand cgo's mangling
+        # TODO(#350): might be fixed by this?.
         'for file in "${filtered_go_files[@]}"; do',
         '  stem=$(basename "$file" .go)',
         '  mv "$objdir/"*"$stem.cgo1.go" "$objdir/$stem.go"',
@@ -966,8 +1073,10 @@
 
 def _cgo_object_impl(ctx):
     arguments = _c_linker_options(ctx, blocklist = [
+        # never link any dependency libraries
         "-l",
         "-L",
+        # manage flags to ld(1) by ourselves
         "-Wl,",
     ])
     arguments += [
@@ -1032,6 +1141,7 @@
     c_hdrs = [s for s in srcs if any([s.endswith(ext) for ext in hdr_exts])]
     c_srcs = [s for s in srcs if not s in (go_srcs + c_hdrs)]
 
+    # Split cgo files into .go parts and .c parts (plus some other files).
     cgogen = _cgo_codegen(
         name = name + ".cgo",
         srcs = go_srcs,
@@ -1043,6 +1153,7 @@
         toolchain = toolchain,
     )
 
+    # Filter c_srcs with build constraints.
     c_filtered_srcs = []
     if len(c_srcs) > 0:
         c_filtered_srcs_name = name + "_filter_cgo_srcs"
@@ -1057,6 +1168,7 @@
         PACKAGE_NAME,
     )
 
+    # Platform-specific settings
     native.config_setting(
         name = name + "_windows_setting",
         values = {
@@ -1072,6 +1184,7 @@
         "//conditions:default": ["-pthread"],
     })
 
+    # Bundles objects into an archive so that _cgo_.o and _all.o can share them.
     native.cc_library(
         name = cgogen.outdir + "/_cgo_lib",
         srcs = cgogen.c_thunks + cgogen.c_exports + c_filtered_srcs + c_hdrs,
@@ -1081,14 +1194,19 @@
             pkg_dir,
             "-I",
             "$(GENDIR)/" + pkg_dir + "/" + cgogen.outdir,
+            # The generated thunks often contain unused variables.
             "-Wno-unused-variable",
         ],
         linkopts = clinkopts + platform_linkopts,
         linkstatic = 1,
+        # _cgo_.o and _all.o keep all objects in this archive.
+        # But it should not be very annoying in the final binary target
+        # because _cgo_object rule does not propagate alwayslink=1
         alwayslink = 1,
         visibility = ["//visibility:private"],
     )
 
+    # Loadable object which cgo reads when it generates _cgo_import.go
     native.cc_binary(
         name = cgogen.outdir + "/_cgo_.o",
         srcs = [cgogen.c_dummy],
@@ -1151,6 +1269,39 @@
         clinkopts = [],
         cdeps = [],
         **kwargs):
+    """Builds a cgo-enabled go library.
+
+    Args:
+      name: A unique name for this rule.
+      srcs: List of Go, C and C++ files that are processed to build a Go library.
+        Those Go files must contain `import "C"`.
+        C and C++ files can be anything allowed in `srcs` attribute of
+        `cc_library`.
+      copts: Add these flags to the C++ compiler.
+      clinkopts: Add these flags to the C++ linker.
+      cdeps: List of C/C++ libraries to be linked into the binary target.
+        They must be `cc_library` rules.
+      deps: List of other libraries to be linked to this library target.
+      data: List of files needed by this rule at runtime.
+
+    NOTE:
+      `srcs` cannot contain pure-Go files, which do not have `import "C"`.
+      So you need to define another `go_library` when you build a go package with
+      both cgo-enabled and pure-Go sources.
+
+      ```
+      cgo_library(
+          name = "cgo_enabled",
+          srcs = ["cgo-enabled.go", "foo.cc", "bar.S", "baz.a"],
+      )
+
+      go_library(
+          name = "go_default_library",
+          srcs = ["pure-go.go"],
+          library = ":cgo_enabled",
+      )
+      ```
+    """
     cgogen = _setup_cgo_library(
         name = name,
         srcs = srcs,
