*** THIS DIFF EXISTS FOR INFORMATIONAL PURPOSES ONLY TO DESCRIBE CHANGES BETWEEN base.diff AND last.diff ***
***   CAVEAT: THIS DIFF IS GENERATED BY interdiff WHICH IS KNOWN TO BE OCCASIONALLY NOT FULLY ACCURATE   ***
diff -u another.thrift another.thrift
--- another.thrift
+++ another.thrift
@@ -1,5 +1,6 @@
 // This test file is adapted from all test files from https://github.com/thriftrw/thriftrw-go/tree/183888fb47c3c225e86d634fa3701ce8b84c1914/gen/internal/tests/thrift
 
+
 struct First {}
 
 struct Second {}
\ No newline at end of file
diff -u comment.thrift comment.thrift
--- comment.thrift
+++ comment.thrift
@@ -1,10 +1,12 @@
-// This test file is adapted from all test files in https://github.com/thriftrw/thriftrw-go/tree/183888fb47c3c225e86d634fa3701ce8b84c1914/gen/internal/tests/thrift
+// This test file is adapted from all test files in https://github.com/thriftrw/thriftrw-go/tree/183888fb47c3c225e86d634fa3701ce8b84c1914/gen/internal/tests/thrift.
 include "./other_constants.thrift"
 include "./containers.thrift"
 include "./enums.thrift"
+/* comment among imports */
 include "./exceptions.thrift"
 include "./structs.thrift"
 include "./unions.thrift"
+// comment among imports
 include "./typedefs.thrift"
 
 struct StructCollision {
\ No newline at end of file
@@ -23,6 +25,7 @@
     5: optional map<string, string> ListOrSet_Or_Map (go.name = "C")
 }
 
+// comment
 enum MyEnum {
     X = 123,
     Y = 456,
\ No newline at end of file
@@ -51,7 +54,7 @@
 }
 
 union union_collision {
-	1: bool collisionField
+	1: bool collisionField /* comment with a different style */
 	2: string collision_field (go.name = "CollisionField2")
 } (go.name="UnionCollision2")
 
\ No newline at end of file
@@ -72,8 +75,8 @@
 
 const containers.PrimitiveContainers primitiveContainers = {
     "listOfInts": other_constants.listOfInts, // imported constant
-    "setOfStrings": ["foo", "bar"],
-    "setOfBytes": other_constants.listOfInts, // imported constant with type casting
+    "setOfStrings": ["foo", "bar"], // another comment
+    "setOfBytes": other_constants.listOfInts,
     "mapOfIntToString": {
         1: "1",
         2: "2",
\ No newline at end of file
@@ -147,7 +150,7 @@
         {"mapValue": {"foo": {"stringValue": "bar"}}},
     ],
 }
-// TODO: union validation for constants?
+// TODO: change TODO!
 
 const typedefs.i128 i128 = uuid
 const typedefs.UUID uuid = {"high": 1234, "low": 5678}
\ No newline at end of file
@@ -155,11 +158,6 @@
 /** Timestamp at which time began. */
 const typedefs.Timestamp beginningOfTime = 0
 
-/**
- * An example frame group.
- *
- * Contains two frames.
- */
 const typedefs.FrameGroup frameGroup = [
     {
         "topLeft": {"x": 1, "y": 2},
\ No newline at end of file
@@ -200,6 +198,7 @@
     3: optional map<enums.EnumWithDuplicateValues, i32> mapOfEnums
 }
 
+// add a comment
 struct ContainersOfContainers {
     1: optional list<list<i32>> listOfLists;
     2: optional list<set<i32>> listOfSets;
\ No newline at end of file
@@ -289,18 +288,14 @@
   /** Name of the user. */
   NAME,
 
-  /**
-   * Home address of the user.
-   *
-   * This record is always present.
-   */
+  // change comments
   HOME_ADDRESS,
 
-  /**
-   * Home address of the user.
-   *
-   * This record may not be present.
-   */
+  /* changed
+
+
+
+  */
   WORK_ADDRESS
 }
 
\ No newline at end of file
@@ -308,7 +303,6 @@
     containing, lower_case, items
 }
 
-// EnumWithLabel use label name in serialization/deserialization
 enum EnumWithLabel {
     USERNAME (go.label = "surname"),
     PASSWORD (go.label = "hashed_password"),
\ No newline at end of file
@@ -319,14 +313,11 @@
 
 }
 
-// collision with RecordType_Values() function.
 enum RecordType_Values { FOO, BAR }
 
 exception EmptyException {}
 
-/**
- * Raised when something doesn't exist.
- */
+
 exception DoesNotExistException {
     /** Key that was missing. */
     1: required string key
\ No newline at end of file
